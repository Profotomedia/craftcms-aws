AWSTemplateFormatVersion: 2010-09-09

Parameters:
  DatabaseName:
    Type: String
    Description: Name of the database.
    Default: craft
  DatabaseUsername:
    Type: String
    Description: Master username for the database.
    Default: craft
  DatabasePassword:
    Type: String
    Description: Master password for the database.
    NoEcho: true
    Default: password

Mappings:
  AWSRegionToAMI:
    eu-west-2:
      AMIID: ami-f4e20693

Resources:
  
  # ---------------------------------------------------------------------------
  # VPC
  # ---------------------------------------------------------------------------
  
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: eu-west-2a
      MapPublicIpOnLaunch: true
      
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicSubnetRouteTable

  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: eu-west-2a
      
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: eu-west-2b
      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  # ---------------------------------------------------------------------------
  # ECR
  # ---------------------------------------------------------------------------
  
  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: craftcms-aws
  
  # ---------------------------------------------------------------------------
  # ECS
  # ---------------------------------------------------------------------------
  
  EcsCluster:
    Type: AWS::ECS::Cluster

  EcsContainerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      SecurityGroupIds: [!Ref EcsSecurityGroup]
      InstanceType: t2.micro
      IamInstanceProfile: !Ref Ec2InstanceProfile
      SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource EcsContainerInstance --region ${AWS::Region}

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref Ec2Role]

  Ec2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 
              # ECR
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
              - ecr:GetAuthorizationToken
              # ECS
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
            Resource: '*'

  # ---------------------------------------------------------------------------
  # RDS
  # ---------------------------------------------------------------------------
  
  RdsInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 100
      DBInstanceClass: db.t2.small
      DBInstanceIdentifier: !Join ['-', [!Ref 'AWS::StackName', database]]
      DBName: !Ref DatabaseName
      DBSubnetGroupName: !Ref RdsSubnetGroup
      Engine: mariadb
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      VPCSecurityGroups: [!Ref RdsSecurityGroup]
      
  RdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS subnet group.
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

Outputs:
  Server:
    Value: !GetAtt EcsContainerInstance.PublicIp
